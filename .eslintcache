[{"/home/bahtiyar/projects/pomodor/test/src/index.js":"1","/home/bahtiyar/projects/pomodor/test/src/App.js":"2","/home/bahtiyar/projects/pomodor/test/src/reportWebVitals.js":"3","/home/bahtiyar/projects/pomodor/test/src/components/SettingsDisplay/SettingsDisplay.js":"4","/home/bahtiyar/projects/pomodor/test/src/components/Timer/TimerWork.js":"5"},{"size":500,"mtime":1611004902299,"results":"6","hashOfConfig":"7"},{"size":2779,"mtime":1612444665406,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611004902299,"results":"9","hashOfConfig":"7"},{"size":2577,"mtime":1612622187324,"results":"10","hashOfConfig":"7"},{"size":5935,"mtime":1612637554962,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1loqtnx",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/home/bahtiyar/projects/pomodor/test/src/index.js",[],["25","26"],"/home/bahtiyar/projects/pomodor/test/src/App.js",[],"/home/bahtiyar/projects/pomodor/test/src/reportWebVitals.js",[],"/home/bahtiyar/projects/pomodor/test/src/components/SettingsDisplay/SettingsDisplay.js",["27"],"import React from 'react';\nimport s from './SettingsDisplay.module.css';\nimport favicon from './../../common/icons/settings-2.svg';\n\nclass SettingsDisplay extends React.Component  {\n    constructor() {\n      super();\n\n      this.state = {\n        display: ''\n      }\n\n    }\n\n    changeSessionTime = (e) => {\n      \n      let session = e.target.value;\n      if(session <= 60) {\n        this.props.setTimerMinute(session);\n      }\n      \n    }\n\n    changeShortBreakTime = (e) => {\n      let shortBreak = e.target.value;\n      this.props.setShortBreakTime(shortBreak)\n    }\n\n    changeLongBteakTime = (e) => {\n      let longBreak = e.target.value;\n      this.props.setLongBreakTime(longBreak)\n    }\n\n    changeNumberBetween = (e) => {\n      this.props.setNumberBetween(e.target.value)\n    }\n\n    closePopupAndSave = () => {\n      this.setState({\n        display: 'none'\n      })\n    }\n\n    closePopup = () => {\n      this.setState({\n        display: 'none'\n      })\n      this.props.notChangeParentComponent();\n    }\n  \n    showSettings = () => {\n      this.setState({\n        display: 'block'\n      })\n      this.props.notChangeParentComponent();\n    }\n\n    render() {\n\n      const style = {display: this.state.display}\n      \n      return (\n\n        <div>\n\n          <div onClick={this.showSettings} className={s.faviconImage}>\n            <img src={favicon} />\n          </div>\n\n        <div className={s.displayWrapper}>\n\n          <div className={s.settingsWrap} style={style}>\n  \n          <div className={s.pomodoro}><span>Pomodoro</span></div>\n          <input onChange={this.changeSessionTime} value={this.props.state.timerMinute} />\n  \n          <div className={s.short}><span>Short Break</span></div>\n          <input onChange={this.changeShortBreakTime} value={this.props.state.shortBreak} />\n  \n          <div className={s.long}><span>Long Break</span></div>\n          <input onChange={this.changeLongBteakTime} value={this.props.state.longBreak} />\n  \n          <div className={s.number}><span>Number of pomodoro between break</span></div>\n          <input onChange={this.changeNumberBetween} value={this.props.state.timeBetween} />\n  \n          <div className={s.buttonsWrapper}>\n  \n          <div onClick={this.closePopup} className={s.buttons}><div className={s.buttonsInside}>Close</div></div>\n          <div onClick={this.closePopupAndSave} className={s.buttons}><div className={s.buttonsInside}>Save</div></div>\n          \n          </div>\n          </div>\n          \n        </div>\n\n        \n\n        </div>\n      )\n    }\n  \n}\n\nexport default SettingsDisplay;","/home/bahtiyar/projects/pomodor/test/src/components/Timer/TimerWork.js",["28"],"import React, { createRef } from 'react';\nimport s from './TimerWork.module.css';\n\nclass TimerWork extends React.Component {\n  \n    constructor() {\n      super();\n\n      this.state = {\n        isSession: true,\n        timerSecond: 0,\n        intervalId: 0,\n        progressId: 0,\n        pausingDisplay: '',\n        startingDisplay: '',\n        continueDisplay: '',\n        stopDisplay: '',\n        stroke: '',\n        strokeWidth: 0,\n        cx: 0,\n        cy: 0,\n        r: '145',\n        fill: 'transparent',\n        circumference: 0,\n        strokeDasharray: 0,\n        strokeDashoffset: 0,\n        transformOrigin: '',\n        transform: '',\n        count: 0\n      }\n\n      this.svgRef = React.createRef();\n\n    }\n\n    componentDidMount() {\n  \n      this.setState({\n        circumference: 2 * Math.PI * this.svgRef.current.r.baseVal.value,\n        strokeDasharray: `${2 * Math.PI * this.svgRef.current.r.baseVal.value} ${2 * Math.PI * this.svgRef.current.r.baseVal.value} `,\n        strokeDashoffset: 2 * Math.PI * this.svgRef.current.r.baseVal.value,\n      })\n    }\n\n    setProgress = (percent) => {\n      const offset = this.state.circumference - percent / 100 * this.state.circumference;\n      this.setState({\n        strokeDashoffset: offset,\n        transformOrigin: 'center',\n        stroke: '#ffffff',\n        strokeWidth: '8',\n        cx: '175',\n        cy: '175',\n        transform: \"rotate(-90deg)\"\n      })\n    }\n\n    counter = () => {\n\n      if(this.props.state.timerMinute > 0) {\n        this.setState((prevState) => {\n          return {\n            count: prevState.count + (100 / (60 * (this.props.state.timerMinute + 1)) )\n          }\n        })\n      } else {\n        this.setState((prevState) => {\n          return {\n            count: prevState.count + ((100 / 60) / 2)\n          }\n        })\n      }\n    }\n\n    startingTimer = () => {\n      \n      let intervalId = setInterval(this.decreaseTimer, 1000)\n      \n      this.setState({\n        intervalId: intervalId,\n        startingDisplay: 'none',\n        pausingDisplay: 'block'\n      })\n      this.counter()\n    }\n\n    continueTimer = () => {\n      let intervalId = setInterval(this.decreaseTimer, 1000)\n\n      this.setState({\n        intervalId: intervalId,\n        startingDisplay: 'none',\n        pausingDisplay: 'block',\n        continueDisplay: 'none',\n        stopDisplay: 'none'\n      })\n    }\n\n    stopTimer = () => {\n      clearInterval(this.state.intervalId)\n      this.props.notChangeParentComponent();\n      this.setState({\n        timerSecond: 0,\n        startingDisplay: 'block',\n        pausingDisplay: 'none',\n        continueDisplay: 'none',\n        stopDisplay: 'none'\n      })\n      \n    }\n\n    pausingTimer = ()  => {\n      this.setState({\n        pausingDisplay: 'none',\n        continueDisplay: 'block',\n        stopDisplay: 'block'\n      })\n      clearInterval(this.state.intervalId)\n    }\n\n    decreaseTimer = () => {\n      console.log(this.state.count)\n      this.counter()\n      this.setProgress(this.state.count)\n      switch(this.state.timerSecond) { \n        \n        case 0:\n\n          if(this.props.state.timerMinute === 0) {\n            if(this.state.isSession) {\n              this.setState({\n                isSession: false\n              })\n\n              this.props.toggleIntervals(this.state.isSession)\n            }  else {\n              this.setState({\n                isSession: true\n              })\n\n              this.props.toggleIntervals(this.state.isSession)\n            } \n            \n          }\n              this.props.updateTimerMinute();\n              this.setState({\n                timerSecond: 59\n              })\n\n          break;\n\n          default:\n            \n            this.setState((prevState) => {\n              return {\n                timerSecond: prevState.timerSecond - 1\n              }\n            })\n\n            break;\n      }\n      \n    }\n\n    render() {\n      return (\n          <div>\n\n        <div className={s.wrap}>\n\n          <div className={s.allWrapper}>\n\n          <svg className={s.progressRing} style={{width: '350px', height: '350px'}}>\n            <circle id=\"ring\" ref={this.svgRef} className={s.progressRingCircle}\n            stroke={this.state.stroke} strokeWidth={this.state.strokeWidth}\n            cx={this.state.cx} cy={this.state.cy} r={this.state.r} fill={this.state.fill} \n              style={{\n              strokeDasharray: this.state.strokeDasharray,\n              strokeDashoffset: this.state.strokeDashoffset,\n              transformOrigin: this.state.transformOrigin,\n              transform: this.state.transform,\n              transition: 'strokeDashoffset 0.3s'\n            }} />\n      </svg>\n\n          <div className={s.timeWrapper}><span>{this.props.state.timerMinute < 10 \n          ? '0' + this.props.state.timerMinute : this.props.state.timerMinute }</span>\n          <span>:</span>\n          <span>{this.state.timerSecond === 0 ? '00' \n          : this.state.timerSecond < 10\n          ? '0' + this.state.timerSecond \n          : this.state.timerSecond}</span>\n          </div>\n          <div className={s.buttonsWrapper}>\n          <div onClick={this.startingTimer} className={s.buttons} \n          style={{display: this.state.startingDisplay}}><div className={s.buttonsInside}>Start</div></div>\n          <div onClick={this.pausingTimer} className={s.buttonsSecond } \n          style={{display: this.state.pausingDisplay}}><div className={s.buttonsInside}>Pause</div></div>\n          <div onClick={this.continueTimer} className={s.continue} \n          style={{display: this.state.continueDisplay}}><div className={s.buttonsInside}>Continue</div></div>\n          <div onClick={this.stopTimer} className={s.buttonsThird} \n          style={{display: this.state.stopDisplay}}><div className={s.buttonsInside}>Stop</div></div>\n          </div>\n          \n        </div>\n        </div>\n          </div>\n      )\n    }\n  \n}\n\nexport default TimerWork;",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":67,"column":13,"nodeType":"35","endLine":67,"endColumn":34},{"ruleId":"36","severity":1,"message":"37","line":1,"column":17,"nodeType":"38","messageId":"39","endLine":1,"endColumn":26},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'createRef' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]